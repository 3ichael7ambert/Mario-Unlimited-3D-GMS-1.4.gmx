<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_all</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>block_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*{
    depth = -y*10;
    z_floor = 0;
    z = -30;       //z base start
    height = -14; // height of object
}
*/
{
    depth = -y*10;
    z_floor = 0;
    height=random(10);
    z = -height*32;       //z base start
    height = -32; // height of object
    image_single=0;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SET UP VARIABLES

// MAXIMUM HEIGHT OF THE CUBOID
max_depth = sprite_height;

// OBJECT TO "FOLLOW"
obj_to_follow = Mario;

// NEW CALCULATION FOR TOWN ROOM "MY_DISTANCE" (ADDS TO THE FOLLOWER'S Y VALUE)
my_distance = sprite_width;

// A FACTOR TO "SLOW DOWN" THE EFFECT, CHANGE THIS TO MAKE THE EFFECT
// MORE DRASTIC

factor = 64;
// factor = 4;    FX for something

// INITIALISE OTHER VARIABLES
hdepth = 0;
vdepth = 0;
//depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Generated for GMS in Geon FX v0.9.0
//Put this code in Create event
score+=25;
//Creating Particle System
psblock = part_system_create();
part_system_depth(psblock, -1);

//Creating Particle Types
//Effect1
ptvlovk_Effect1 = part_type_create();
part_type_shape(ptvlovk_Effect1, pt_shape_square);
part_type_size(ptvlovk_Effect1, 0.50, 0.70, 0, 0);
part_type_scale(ptvlovk_Effect1, 1, 0.50);
part_type_orientation(ptvlovk_Effect1, 0, 0, 0, 0, 0);
part_type_color3(ptvlovk_Effect1, 2593477, 686001, 16512);
part_type_alpha3(ptvlovk_Effect1, 1, 0.56, 0.22);
part_type_blend(ptvlovk_Effect1, 0);
part_type_life(ptvlovk_Effect1, 20, 30);
part_type_speed(ptvlovk_Effect1, 5, 10, 0, 0);
part_type_direction(ptvlovk_Effect1, 41, 130, 0, 0);
part_type_gravity(ptvlovk_Effect1, 1.20, 271);

//Creating Emitters
peblock_Effect1 = part_emitter_create(psblock);

//Adjusting Emitter positions. Starting Emitter Streams or Bursts.
var xp, yp;
xp = x;
yp = y;
part_emitter_region(psblock, peblock_Effect1, xp, xp+32, yp+z, yp+32+z, ps_shape_ellipse, ps_distr_linear);
part_emitter_burst(psblock, peblock_Effect1, ptvlovk_Effect1, 10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CALCULATE DEPTH AND STUFF

// SET DEPTH BASED ON THE POSITION OF THE FOLLOWED OBJECT

hdepth = (obj_to_follow.x-x)/factor;
vdepth = (obj_to_follow.y-y+my_distance)/factor;

// CHECK DEPTH OF CUBE AND ALTER VARIABLES USED WHEN DRAWING

if (hdepth &gt; max_depth/2) {

    hdepth=max_depth/2;

}

if (hdepth &lt; -max_depth/2) {

    hdepth=-max_depth/2;

}

if (vdepth &gt; max_depth/2) {

    vdepth=max_depth/2;

}

if (vdepth &lt; -max_depth/2) {

    vdepth=-max_depth/2;

}

// SET DRAW DEPTH TO MAKE OBJECTS CLOSER TO THE BOTTOM OF THE SCREEN DRAW LAST

//depth = -y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    depth = -y*8-z;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW THE TOP OF THE CUBE IN DRAW END SO IT WON'T BE COVERED

// TOP
      //   draw_sprite_pos(sprite_index,image_index,x-hdepth,y+z-vdepth,x+sprite_width-hdepth,y+z-vdepth,x+sprite_width-hdepth,y+z-sprite_height-vdepth,x-hdepth,y+z-sprite_height-vdepth,.7);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if( z &lt; z_floor) 
    {
    draw_background_ext(bshadow,x+hdepth,y,1,1,0,1,.3); 
    }
    //best to use tile and set to zero depth
   // draw_sprite(sprite_index,image_index,x,y+z); //the block image
    
    
    
    
    
    //draw_sprite_pos(sprite_index,image_index,x,y,x,y,x,y,x,y,1);
  
    //  draw_set_colour(c_red);
  //  draw_sprite_pos(sprite_index,image_index,x,y+z+sprite_height,x+sprite_width,y+z+sprite_height,x+sprite_width,y,x,y,1);
  //      draw_set_colour(c_yellow);
  //  draw_sprite_pos(sprite_index,image_index,x,y,x+sprite_width,y,x+sprite_width,y-z,x,y-z,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW THE BOTTOM AND THE SIDES IN THE DRAW EVENT
//  SO THAT THEY WILL NOT COVER THE TOP OF OTHER CUBES


draw_set_alpha(1-(height/10));



//draw_self();
// TOP +z
//draw_sprite_pos(sprite_index,image_index,x-hdepth,y+z-vdepth,x+sprite_width-hdepth,y+z-vdepth,x+sprite_width,y+z,x,y+z,1);
draw_sprite_pos(sprite_index,image_index,x,y+z-sprite_height,x+sprite_width,y+z-sprite_height,x+sprite_width+hdepth,y+z-vdepth,x+hdepth,y+z-vdepth,1);

// LEFT
//draw_sprite_pos(sprite_index,image_index,x,y+z-sprite_height,x,y+z,x+hdepth,y+z-vdepth,x+hdepth,y+z-vdepth-sprite_height,1);
draw_sprite_pos(sprite_index,image_index,x,y+z-sprite_height,x,y+z,x+hdepth,y+z+sprite_height-vdepth,x+hdepth,y+z-vdepth,1);


// RIGHT
draw_sprite_pos(sprite_index,image_index,x+sprite_width,y+z-sprite_height,x+sprite_width,y+z,x+sprite_width+hdepth,y+z+sprite_height-vdepth,x+sprite_width+hdepth,y+z-vdepth,1);


// BOTTOM
//draw_sprite_pos(sprite_index,image_index,x-hdepth,y+z+sprite_height-vdepth,x+sprite_width-hdepth,y+z+sprite_height-vdepth,x+sprite_width,y+z+sprite_height,x,y+z+sprite_height,1);
draw_sprite_pos(sprite_index,image_index,x+hdepth,y+z+sprite_height-vdepth,x+sprite_width+hdepth,y+z+sprite_height-vdepth,x+sprite_width,y+z,x,y+z,1-(height/10));



//COVER TOP
//draw_sprite_pos(sprite_index,image_index,x,y+z,x+sprite_width,y+z,x+sprite_width-hdepth,y+z-sprite_height-vdepth,x-hdepth,y+z-sprite_height-vdepth,1);
draw_sprite_pos(sprite_index,image_index,x,y+z,x+sprite_width,y+z,x+sprite_width,y+z-sprite_height,x,y+z-sprite_height,1-(height/10));
//draw_sprite_pos(sprite_index,image_index,x-hdepth,y+z,x+sprite_width-hdepth,y+z,x+sprite_width-hdepth,y+z-sprite_height,x-hdepth,y+z-sprite_height,1);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,30</point>
    <point>23,23</point>
  </PhysicsShapePoints>
</object>
